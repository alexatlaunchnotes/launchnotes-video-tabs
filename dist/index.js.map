{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import gsap from \"gsap\";\n\ninterface Window {\n  Webflow: any;\n  _wq: any;\n}\n\ntype ProgressDirection = \"horizontal\" | \"vertical\";\n\nenum selectors {\n  COMPONENT = '[wb-autotabs=\"component\"]',\n  PANE = \".w-tab-pane\",\n  LINK = \".w-tab-link\",\n  CURRENT_CLASS = \"w--current\",\n  TAB_BODY = \".tab-body--pillars\",\n  PROGRESS_BAR = '[wb-autotabs=\"progress\"]',\n  PROGRESS_DIRECTION = \"wb-autotabs-progress-direction\",\n}\n\nwindow.Webflow ||= [];\n\nwindow.Webflow.push(() => {\n  const components = document.querySelectorAll<HTMLDivElement>(selectors.COMPONENT);\n\n  if (components.length === 0) {\n    console.error(\"No autotabs components found!\");\n  }\n\n  // Loop through each component -> we want to grab the individual component\n  // and it's index so we know what is changing and which one is changing\n  components.forEach((component, index) => {\n    // Grab the links, videos, and Progress Bars and store them in an array NOT a NodeList (what would happen if you use .querySelectorAll)\n    const links = Array.from(component.querySelectorAll<HTMLAnchorElement>(selectors.LINK));\n    const videos = component.querySelectorAll<HTMLVideoElement>(\"video\");\n    const progressBars = Array.from(component.querySelectorAll<HTMLDivElement>(selectors.PROGRESS_BAR));\n\n    // Let's get the current index\n    let currentIndex = links.findIndex((link) => link.classList.contains(selectors.CURRENT_CLASS));\n    let requestId;\n\n    // Setup the sections\n    videos.forEach((video) => {\n        video.removeAttribute('loop')\n        video.removeAttribute('autoplay')\n    })\n\n    links.forEach((link) => {\n        const bodyText: HTMLDivElement | null = link.querySelector(selectors.TAB_BODY);\n        if (!bodyText) return\n\n        if (!link.classList.contains('w--current')) {\n            bodyText.style.display = 'none';\n        } else {\n            bodyText.style.display = 'block';\n        }\n    })\n\n    async function playNextVideo(index: number = currentIndex) {\n        // set playhead back to zero\n        videos.forEach((video) => {\n            video.currentTime - 0;\n            video.pause()\n        })\n\n      // Wait 1 milli second to make sure videos are paused\n        await new Promise((resolve) => setTimeout(resolve, 100));\n\n        currentIndex = index;\n        let currentVideo: HTMLVideoElement = videos[currentIndex % videos.length] as HTMLVideoElement;\n        await currentVideo.play()\n        hideTabBodyText(currentIndex)\n        updateProgressBar(currentVideo, progressBars[currentIndex]);\n        \n        // On end\n        currentVideo.onended = () => {\n            currentIndex = (currentIndex + 1) % videos.length\n            simulateClick(links[currentIndex]);\n            playNextVideo(currentIndex)\n        }\n    }\n\n    function hideTabBodyText(currentIndex: number) {\n        const tabs: NodeListOf<HTMLAnchorElement> = document.querySelectorAll<HTMLAnchorElement>('.w-tab-link')\n\n        tabs.forEach((tab: HTMLAnchorElement ) => {\n            const bodyText: HTMLDivElement | null = tab.querySelector(selectors.TAB_BODY);\n            if (!bodyText) return\n            console.log(currentIndex, tab)\n            if (!tab.classList.contains(selectors.CURRENT_CLASS)) {\n                console.log(bodyText)\n                bodyText.style.display = 'none';\n            } else {\n                bodyText.style.display = 'block'\n            }\n        })\n    }\n\n    function updateProgressBar(video: HTMLVideoElement, progressBar: HTMLDivElement) {\n        let progressDirection: string =\n        progressBar.getAttribute(selectors.PROGRESS_DIRECTION) || 'horizontal';\n\n      if (progressDirection !== 'horizontal' && progressDirection !== 'vertical') {\n        console.error('invalid progress direction');\n        return;\n      }\n\n      if (requestId) {\n        cancelAnimationFrame(requestId);\n        resetProgressBars(progressBars);\n      }\n\n      let start: number;\n      function step(timestamp: number) {\n        if (!start) start = timestamp;\n\n        let progress = (timestamp - start) / (video.duration * 1000); // duration is in seconds, timestamp in milliseconds\n        progress = Math.min(progress, 1); // Cap progress at 1 (100%)\n\n        if (progressDirection === 'horizontal') {\n          progressBar.style.transform = `scaleX(${progress})`;\n        } else {\n          progressBar.style.transform = `scaleY(${progress})`;\n        }\n\n        if (progress < 1) {\n          requestId = requestAnimationFrame(step); // Save the request ID\n        }\n      }\n\n      requestId = requestAnimationFrame(step); // Save the request ID\n    }\n\n    function resetProgressBars(progressBars: HTMLDivElement[]) {\n        progressBars.forEach((progressBar) => {\n            let progressDirection: string =\n              progressBar.getAttribute(selectors.PROGRESS_DIRECTION) || 'horizontal';\n    \n            if (progressDirection !== 'horizontal' && progressDirection !== 'vertical') {\n              console.error('invalid progress direction');\n              return;\n            }\n            if (progressDirection === 'horizontal') {\n              progressBar.style.transform = 'scaleX(0)';\n            } else {\n              progressBar.style.transform = 'scaleY(0)';\n            }\n          });\n    }\n\n    links.forEach((link, index) => {\n        link.addEventListener('click', () => playNextVideo(index))\n    })\n\n    playNextVideo();\n  });\n});\n\n// need to simulate click to trigger tab change\n// using click() causes scroll issues in Safari\nfunction simulateClick(element: HTMLAnchorElement) {\n  let clickEvent = new MouseEvent(\"click\", {\n    view: window,\n    bubbles: true,\n    cancelable: false,\n  });\n  element.dispatchEvent(clickEvent);\n}"],
  "mappings": "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",
  "names": ["components", "component", "index", "links", "videos", "progressBars", "currentIndex", "link", "requestId", "video", "bodyText", "playNextVideo", "resolve", "currentVideo", "hideTabBodyText", "updateProgressBar", "simulateClick", "tab", "progressBar", "progressDirection", "resetProgressBars", "start", "step", "timestamp", "progress", "element", "clickEvent"]
}
