{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import gsap from \"gsap\";\n\ninterface Window {\n  Webflow: any;\n  _wq: any;\n}\n\ntype ProgressDirection = \"horizontal\" | \"vertical\";\n\nenum selectors {\n  COMPONENT = '[wb-autotabs=\"component\"]',\n  PANE = \".w-tab-pane\",\n  LINK = \".w-tab-link\",\n  CURRENT_CLASS = \"w--current\",\n  PROGRESS_BAR = '[wb-autotabs=\"progress\"]',\n  PROGRESS_DIRECTION = \"wb-autotabs-progress-direction\",\n}\n\nwindow.Webflow ||= [];\n\nwindow.Webflow.push(() => {\n  const components = document.querySelectorAll<HTMLDivElement>(selectors.COMPONENT);\n\n  if (components.length === 0) {\n    console.error(\"No autotabs components found!\");\n  }\n\n  // Loop through each component -> we want to grab the individual component\n  // and it's index so we know what is changing and which one is changing\n  components.forEach((component, index) => {\n    // Grab the links, videos, and Progress Bars and store them in an array NOT a NodeList (what would happen if you use .querySelectorAll)\n    const links = Array.from(component.querySelectorAll<HTMLAnchorElement>(selectors.LINK));\n    const videos = component.querySelectorAll<HTMLVideoElement>(\"video\");\n    const progressBars = Array.from(component.querySelectorAll<HTMLDivElement>(selectors.PROGRESS_BAR));\n\n    // Let's get the current index\n    let currentIndex = links.findIndex((link) => link.classList.contains(selectors.CURRENT_CLASS));\n    let requestId;\n\n    videos.forEach((video) => {\n        video.removeAttribute('loop')\n        video.removeAttribute('autoplay')\n    })\n\n    async function playNextVideo(index: number = currentIndex) {\n        // set playhead back to zero\n        videos.forEach((video) => {\n            video.currentTime - 0;\n            video.pause()\n        })\n\n      // Wait 1 milli second to make sure videos are paused\n        await new Promise((resolve) => setTimeout(resolve, 100));\n\n        currentIndex = index;\n        let currentVideo: HTMLVideoElement = videos[currentIndex % videos.length] as HTMLVideoElement;\n        console.log(currentVideo, currentIndex)\n        await currentVideo.play()\n        updateProgressBar(currentVideo, progressBars[currentIndex]);\n        \n        // On end\n        currentVideo.onended = () => {\n            currentIndex = (currentIndex + 1) % videos.length\n            console.log('fired', currentIndex)\n            simulateClick(links[currentIndex]);\n            playNextVideo(currentIndex)\n        }\n    }\n\n    function updateProgressBar(video: HTMLVideoElement, progressBar: HTMLDivElement) {\n        let progressDirection: string =\n        progressBar.getAttribute(selectors.PROGRESS_DIRECTION) || 'horizontal';\n\n      if (progressDirection !== 'horizontal' && progressDirection !== 'vertical') {\n        console.error('invalid progress direction');\n        return;\n      }\n\n      if (requestId) {\n        cancelAnimationFrame(requestId);\n        resetProgressBars(progressBars);\n      }\n\n      let start: number;\n      function step(timestamp: number) {\n        if (!start) start = timestamp;\n\n        let progress = (timestamp - start) / (video.duration * 1000); // duration is in seconds, timestamp in milliseconds\n        progress = Math.min(progress, 1); // Cap progress at 1 (100%)\n\n        if (progressDirection === 'horizontal') {\n          progressBar.style.transform = `scaleX(${progress})`;\n        } else {\n          progressBar.style.transform = `scaleY(${progress})`;\n        }\n\n        if (progress < 1) {\n          requestId = requestAnimationFrame(step); // Save the request ID\n        }\n      }\n\n      requestId = requestAnimationFrame(step); // Save the request ID\n    }\n\n    function resetProgressBars(progressBars: HTMLDivElement[]) {\n        progressBars.forEach((progressBar) => {\n            let progressDirection: string =\n              progressBar.getAttribute(selectors.PROGRESS_DIRECTION) || 'horizontal';\n    \n            if (progressDirection !== 'horizontal' && progressDirection !== 'vertical') {\n              console.error('invalid progress direction');\n              return;\n            }\n            if (progressDirection === 'horizontal') {\n              progressBar.style.transform = 'scaleX(0)';\n            } else {\n              progressBar.style.transform = 'scaleY(0)';\n            }\n          });\n    }\n\n    links.forEach((link, index) => {\n        link.addEventListener('click', () => playNextVideo(index))\n    })\n\n    playNextVideo();\n  });\n});\n\n// need to simulate click to trigger tab change\n// using click() causes scroll issues in Safari\nfunction simulateClick(element: HTMLAnchorElement) {\n  let clickEvent = new MouseEvent(\"click\", {\n    view: window,\n    bubbles: true,\n    cancelable: false,\n  });\n  element.dispatchEvent(clickEvent);\n}"],
  "mappings": "MAkBA,OAAO,UAAY,CAAC,EAEpB,OAAO,QAAQ,KAAK,IAAM,CACxB,IAAMA,EAAa,SAAS,iBAAiC,2BAAmB,EAE5EA,EAAW,SAAW,GACxB,QAAQ,MAAM,+BAA+B,EAK/CA,EAAW,QAAQ,CAACC,EAAWC,IAAU,CAEvC,IAAMC,EAAQ,MAAM,KAAKF,EAAU,iBAAoC,aAAc,CAAC,EAChFG,EAASH,EAAU,iBAAmC,OAAO,EAC7DI,EAAe,MAAM,KAAKJ,EAAU,iBAAiC,0BAAsB,CAAC,EAG9FK,EAAeH,EAAM,UAAWI,GAASA,EAAK,UAAU,SAAS,YAAuB,CAAC,EACzFC,EAEJJ,EAAO,QAASK,GAAU,CACtBA,EAAM,gBAAgB,MAAM,EAC5BA,EAAM,gBAAgB,UAAU,CACpC,CAAC,EAED,eAAeC,EAAcR,EAAgBI,EAAc,CAEvDF,EAAO,QAASK,GAAU,CACtBA,EAAM,YAAc,EACpBA,EAAM,MAAM,CAChB,CAAC,EAGD,MAAM,IAAI,QAASE,GAAY,WAAWA,EAAS,GAAG,CAAC,EAEvDL,EAAeJ,EACf,IAAIU,EAAiCR,EAAOE,EAAeF,EAAO,QAClE,QAAQ,IAAIQ,EAAcN,CAAY,EACtC,MAAMM,EAAa,KAAK,EACxBC,EAAkBD,EAAcP,EAAaC,EAAa,EAG1DM,EAAa,QAAU,IAAM,CACzBN,GAAgBA,EAAe,GAAKF,EAAO,OAC3C,QAAQ,IAAI,QAASE,CAAY,EACjCQ,EAAcX,EAAMG,EAAa,EACjCI,EAAcJ,CAAY,CAC9B,CACJ,CAEA,SAASO,EAAkBJ,EAAyBM,EAA6B,CAC7E,IAAIC,EACJD,EAAY,aAAa,gCAA4B,GAAK,aAE5D,GAAIC,IAAsB,cAAgBA,IAAsB,WAAY,CAC1E,QAAQ,MAAM,4BAA4B,EAC1C,MACF,CAEIR,IACF,qBAAqBA,CAAS,EAC9BS,EAAkBZ,CAAY,GAGhC,IAAIa,EACJ,SAASC,EAAKC,EAAmB,CAC1BF,IAAOA,EAAQE,GAEpB,IAAIC,GAAYD,EAAYF,IAAUT,EAAM,SAAW,KACvDY,EAAW,KAAK,IAAIA,EAAU,CAAC,EAE3BL,IAAsB,aACxBD,EAAY,MAAM,UAAY,UAAUM,KAExCN,EAAY,MAAM,UAAY,UAAUM,KAGtCA,EAAW,IACbb,EAAY,sBAAsBW,CAAI,EAE1C,CAEAX,EAAY,sBAAsBW,CAAI,CACxC,CAEA,SAASF,EAAkBZ,EAAgC,CACvDA,EAAa,QAASU,GAAgB,CAClC,IAAIC,EACFD,EAAY,aAAa,gCAA4B,GAAK,aAE5D,GAAIC,IAAsB,cAAgBA,IAAsB,WAAY,CAC1E,QAAQ,MAAM,4BAA4B,EAC1C,MACF,CACIA,IAAsB,aACxBD,EAAY,MAAM,UAAY,YAE9BA,EAAY,MAAM,UAAY,WAElC,CAAC,CACP,CAEAZ,EAAM,QAAQ,CAACI,EAAML,IAAU,CAC3BK,EAAK,iBAAiB,QAAS,IAAMG,EAAcR,CAAK,CAAC,CAC7D,CAAC,EAEDQ,EAAc,CAChB,CAAC,CACH,CAAC,EAID,SAASI,EAAcQ,EAA4B,CACjD,IAAIC,EAAa,IAAI,WAAW,QAAS,CACvC,KAAM,OACN,QAAS,GACT,WAAY,EACd,CAAC,EACDD,EAAQ,cAAcC,CAAU,CAClC",
  "names": ["components", "component", "index", "links", "videos", "progressBars", "currentIndex", "link", "requestId", "video", "playNextVideo", "resolve", "currentVideo", "updateProgressBar", "simulateClick", "progressBar", "progressDirection", "resetProgressBars", "start", "step", "timestamp", "progress", "element", "clickEvent"]
}
